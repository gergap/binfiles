#!/usr/bin/env bash
# (C) 2020 Gerhard Gappmeier
# this script is based on the example script from
# https://tools.suckless.org/dmenu/scripts/
#
# Requirements:
# * dmenu (for DWM)
# * pass (The UNIX password manager)
# * xdotool (for typing passwords)
# * pass-otp (For generating one-time-passwords)
# * zbar-tools (For scanning QR codes)
#
# However, I extended it to type login name and password for
# simple logins to websites.
# Therefor the pass entry should look like this:
#   <password>
#   login: <username>
#   mode: tab|enter
# The 1st line contains the password as always..
# The 2nd line optionally contains a user name with some description
# The 3rd line optionally contains a mode. "tab" uses <tab> between <username>
#   and <password>. "enter" uses <enter> for web pages which use two consecutive pages
#   for username and password instead of two textboxes on the same page. If the
#   mode line is missing it defaults to use <tab>.
# separated by a colon.
# Operation modes:
#  1. without arguments: copies password to clipboard
#  2. with --type option: types login credentials
#  2a: when a login name is available: types <username> <tab> <password> <enter>
#  2b: when a login name is not available: types <password> <enter>
# Security: You should change the owner of the script to root and make it
# readonly, world executable. So no evil program can change the script to
# intercept passwords:
#  sudo chown root:root passmenu
#  sudo chmod 755 passmenu
# OTP: for generating OTP you need to store a line like e.g.
# otpauth://totp/service.domain.com:username?secret=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&issuer=service.domain.com
# in the password entry.
# You can create such in URL by "scanning" a QR code.
# 1. Scan from PNG: `zbarimg -q --raw qrcode.png | pass otp append mycred`
# 2. Scan from WebCAM: `zbarimg -q --raw | pass otp append mycred`
#

shopt -s nullglob globstar

typeit=0
passonly=0
if [[ $1 == "--type" ]]; then
    typeit=1
    shift
fi
if [[ $1 == "--pass-only" ]]; then
    passonly=1
    shift
fi

prefix=${PASSWORD_STORE_DIR-~/.password-store}
password_files=( "$prefix"/**/*.gpg )
password_files=( "${password_files[@]#"$prefix"/}" )
password_files=( "${password_files[@]%.gpg}" )

password=$(printf '%s\n' "${password_files[@]}" | dmenu "$@")

[[ -n $password ]] || exit

if [[ $typeit -eq 0 ]]; then
    pass show -c "$password" 2>/dev/null
else
    output=`pass show "$password"`
    mode=`echo "$output" | awk '{ if (NR==3) { print $2 }}'`
    login=`echo "$output" | awk '{ if (NR==2) { print $2 }}'`
    pass=`echo "$output" | awk '{ if (NR==1) { print $1 }}'`
    otp=`echo "$output" | grep 'otpauth://'`
    if [ -z "$login" ] || [ $passonly -eq 1 ]; then
        # just type the password
        echo "$pass" | xdotool type --clearmodifiers --file -
    else
        # type login <tab> password
        if [ "$mode" == "enter" ]; then
            echo -e "$login" | xdotool type --clearmodifiers --file -
            sleep 1
            echo -e "$pass" | xdotool type --clearmodifiers --file -
        else
            echo -e "$login\t$pass\n" | xdotool type --clearmodifiers --file -
        fi
        if [ ! -z "$otp" ]; then
            sleep 1
            pass otp "$password" | xdotool type --clearmodifiers --file -
        fi
    fi
fi

