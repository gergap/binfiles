#!/usr/bin/env bash
# (C) 2020 Gerhard Gappmeier
# this script is based on the example script from
# https://tools.suckless.org/dmenu/scripts/
#
# However, I extended it to type login name and password for
# simple logins to websites.
# Therefor the pass entry should look like this:
#   <password>
#   login: <loginame>
# The 1st line contains the password as always..
# The 2nd line optionally contains a login name with some description
# separated by a colon.
# Operation modes:
#  1. without arguments: copies password to clipboard
#  2. with --type option: types login credentials
#  2a: when a login name is available: types <login> <tab> <password> <enter>
#  2b: when a login name is not available: types <password> <enter>
# Security: You should change the owner of the script to root and make it
# readonly, world executable. So no evil program can change the script to
# intercept passwords:
#  sudo chown root:root passmenu
#  sudo chmod 755 passmenu

shopt -s nullglob globstar

typeit=0
if [[ $1 == "--type" ]]; then
    typeit=1
    shift
fi

prefix=${PASSWORD_STORE_DIR-~/.password-store}
password_files=( "$prefix"/**/*.gpg )
password_files=( "${password_files[@]#"$prefix"/}" )
password_files=( "${password_files[@]%.gpg}" )

password=$(printf '%s\n' "${password_files[@]}" | dmenu "$@")

[[ -n $password ]] || exit

if [[ $typeit -eq 0 ]]; then
    pass show -c "$password" 2>/dev/null
else
    login=`pass show "$password" | awk '{ if (NR==2) { print $2 }}'`
    pass=`pass show "$password" | awk '{ if (NR==1) { print $1 }}'`
    if [ -z "$login"]; then
        # just type the password
        echo "$pass" | xdotool type --clearmodifiers --file -
    else
        # type login <tab> password
        echo -e "$login\t$pass" | xdotool type --clearmodifiers --file -
    fi
fi
